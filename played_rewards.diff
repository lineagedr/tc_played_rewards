diff --git a/src/server/game/Entities/Player/Player.cpp b/src/server/game/Entities/Player/Player.cpp
index c95fc90d54..18c3ae3226 100644
--- a/src/server/game/Entities/Player/Player.cpp
+++ b/src/server/game/Entities/Player/Player.cpp
@@ -103,6 +103,7 @@
 #include "WorldPacket.h"
 #include "WorldSession.h"
 #include "WorldStatePackets.h"
+#include "../scripts/Custom/PlayedRewards.h"
 
 #define ZONE_UPDATE_INTERVAL (1*IN_MILLISECONDS)
 
@@ -399,6 +400,8 @@ Player::Player(WorldSession* session): Unit(true)
     m_reputationMgr = new ReputationMgr(this);
 
     m_groupUpdateTimer.Reset(5000);
+
+    m_PlayedRewardsTimer = 0;
 }
 
 Player::~Player()
@@ -1343,6 +1346,15 @@ void Player::Update(uint32 p_time)
     //because we don't want player's ghost teleported from graveyard
     if (IsHasDelayedTeleport() && IsAlive())
         TeleportTo(m_teleport_dest, m_teleport_options);
+
+    // Check for played rewards every second
+    if (m_PlayedRewardsTimer <= p_time)
+    {
+        m_PlayedRewardsTimer = sPlayedRewards->PLAYED_UPDATE_TIME;
+        sPlayedRewards->SendReward(this);
+    }
+    else
+        m_PlayedRewardsTimer -= p_time;
 }
 
 void Player::setDeathState(DeathState s)
diff --git a/src/server/game/Entities/Player/Player.h b/src/server/game/Entities/Player/Player.h
index 646d98925b..37d1e7ac3f 100644
--- a/src/server/game/Entities/Player/Player.h
+++ b/src/server/game/Entities/Player/Player.h
@@ -2449,6 +2449,9 @@ class TC_GAME_API Player : public Unit, public GridObject<Player>
 
         TimeTracker m_groupUpdateTimer;
 
+        // Played rewards
+        uint32 m_PlayedRewardsTimer;
+
     private:
         // internal common parts for CanStore/StoreItem functions
         InventoryResult CanStoreItem_InSpecificSlot(uint8 bag, uint8 slot, ItemPosCountVec& dest, ItemTemplate const* pProto, uint32& count, bool swap, Item* pSrcItem) const;
diff --git a/src/server/scripts/Custom/PlayedRewards.cpp b/src/server/scripts/Custom/PlayedRewards.cpp
new file mode 100644
index 0000000000..5a0f758fd2
--- /dev/null
+++ b/src/server/scripts/Custom/PlayedRewards.cpp
@@ -0,0 +1,304 @@
+/*
+    Written by Alistar@AC-WEB
+    Discord: Alistar#2047
+*/
+
+#include "PlayedRewards.h"
+
+PlayedRewards* PlayedRewards::instance()
+{
+    static PlayedRewards instance;
+    return &instance;
+}
+
+void PlayedRewards::LoadConfig()
+{
+    m_IsEnabled   = sConfigMgr->GetBoolDefault("PlayedRewards.Enable", false);
+    m_SiteData[0] = sConfigMgr->GetStringDefault("PlayedRewards.SiteDB", "");
+    m_SiteData[1] = sConfigMgr->GetStringDefault("PlayedRewards.SiteTable", "");
+    m_SiteData[2] = sConfigMgr->GetStringDefault("PlayedRewards.SiteColumnID", "");
+    m_SiteData[3] = sConfigMgr->GetStringDefault("PlayedRewards.SiteColumnVP", "");
+    m_SiteData[4] = sConfigMgr->GetStringDefault("PlayedRewards.SiteColumnDP", "");
+}
+
+void PlayedRewards::LoadFromDB()
+{
+    // H:M:S
+    // 02:13:55 = 8035 seconds
+    const auto timeToSec = [](const std::string_view timeStr) -> uint32
+    {
+        const auto tokenize = Trinity::Tokenize(timeStr, ':', true);
+        const uint32 hour   = std::stoi(tokenize[0].data());
+        const uint32 min    = std::stoi(tokenize[1].data());
+        const uint32 sec    = std::stoi(tokenize[2].data());
+
+        return (((hour * 60) + min) * 60) + sec;
+    };
+
+    uint32 count = 0;
+    if (const QueryResult rewardList = CharacterDatabase.PQuery("SELECT * FROM played_rewards"))
+    {
+        do
+        {
+            const Field* fields          = rewardList->Fetch();
+            const uint32 rewardId        = fields[0].GetUInt32();
+            const std::string playedTime = fields[1].GetString();
+            const uint32 gold            = fields[2].GetUInt32();
+            const uint32 title           = fields[3].GetUInt32();
+            const uint32 achievement     = fields[4].GetUInt32();
+            const uint32 exp             = fields[5].GetUInt32();
+            const uint32 level           = fields[6].GetUInt32();
+            const std::string items      = fields[7].GetString();
+            const uint32 honorPoints     = fields[8].GetUInt32();
+            const uint32 arenaPoints     = fields[9].GetUInt32();
+            const uint32 votePoints      = fields[10].GetUInt32();
+            const uint32 donationPoints  = fields[11].GetUInt32();
+
+            const std::array<std::pair<uint32, RewardType>, 9> rewardPair =
+            {{
+                {gold,           RewardType::GOLD},
+                {title,          RewardType::TITLE},
+                {achievement,    RewardType::ACHIEVEMENT},
+                {exp,            RewardType::EXP},
+                {level,          RewardType::LEVEL},
+                {honorPoints,    RewardType::HONOR_POINTS},
+                {arenaPoints,    RewardType::ARENA_POINTS},
+                {votePoints,     RewardType::VOTE_POINTS},
+                {donationPoints, RewardType::DONATION_POINTS}
+            }};
+
+            // insert to our reward map
+            for (const auto& [reward, type] : rewardPair)
+                if (reward)
+                    m_RewardMap.insert({ rewardId, {playedTime, timeToSec(playedTime), type, reward}});
+
+            // Process any items
+            if (items != "0")
+            {
+                auto tokens = Trinity::Tokenize(items, ' ', true);
+                if (tokens.size() % 2 == 0)
+                {
+                    std::unordered_map<uint32, uint32> items;
+                    for (auto it = std::begin(tokens); it != std::end(tokens); ++it)
+                    {
+                        items.insert({ atoi(it->data()), atoi((it + 1)->data()) });
+                        ++it;
+                    }
+                    m_RewardMap.insert({ rewardId, {playedTime, timeToSec(playedTime), RewardType::ITEM, 0, items} });
+                }
+                else
+                    TC_LOG_ERROR("", "[PlayedRewards]: Incorrect items format for rewardId %u.", rewardId);
+            }
+
+            ++count;
+
+        } while (rewardList->NextRow());
+    }
+    TC_LOG_INFO("server.loading", ">> Loaded %u played rewards", count);
+}
+
+bool PlayedRewards::IsEnabled() const
+{
+    return m_IsEnabled;
+}
+
+bool PlayedRewards::IsEligible(Player* player, const uint32 playTime, const uint32 rewardId)
+{
+    // Check if has passed reward played time
+    if (player->GetTotalPlayedTime() < playTime)
+        return false;
+
+    // Check if has already claimed that reward
+    const uint64 plrGUID = player->GetGUID().GetCounter();
+    if (m_RewardedMap.find(plrGUID) != std::end(m_RewardedMap))
+    {
+        auto it = std::find(std::begin(m_RewardedMap[plrGUID]), std::end(m_RewardedMap[plrGUID]), rewardId);
+        if (it != std::end(m_RewardedMap[plrGUID]))
+            return false;
+    }
+
+    return true;
+}
+
+void PlayedRewards::AnnounceReward(Player* player, const std::string_view str, const std::string_view playedTime)
+{
+    std::string msg = "[|cffff0000Played Rewards|r]: For reaching ";
+    msg += playedTime.data();
+    msg += " played time, you've been awarded: ";
+    msg += str;
+    msg += ".";
+    ChatHandler(player->GetSession()).PSendSysMessage(msg.c_str());
+}
+
+void PlayedRewards::ConcatRewardMsg(Player* player, const RewardData& data,
+    std::string& message,
+    const ItemTemplate* item,
+    const CharTitlesEntry* const title,
+    const AchievementEntry* const achiv)
+{
+    switch (data.type)
+    {
+        case RewardType::ITEM:
+        {
+            message += "x [" + item->Name1 + "], ";
+            break;
+        }
+        case RewardType::TITLE:
+        {
+            message += "1x ";
+            message += RewardTypeToStr.at(data.type).data();
+            message += " [";
+            std::string titleName = player->GetGender() == GENDER_FEMALE ?
+                title->Name1[SERVER_LOCALE] : title->Name[SERVER_LOCALE];
+            message += titleName.replace(titleName.find("%s"), 2, player->GetName());
+            message += "], ";
+            break;
+        }
+        case RewardType::ACHIEVEMENT:
+        {
+            message += "1x ";
+            message += RewardTypeToStr.at(data.type).data();
+            message += " [";
+            message += achiv->Title[SERVER_LOCALE];
+            message += "], ";
+            break;
+        }
+        default:
+        {
+            message += std::to_string(data.amount) + "x " + RewardTypeToStr.at(data.type).data() + ", ";
+            break;
+        }
+    }
+}
+
+void PlayedRewards::SendReward(Player* player)
+{
+    std::unordered_set<uint32> claimedRewards{};
+    std::string message{};
+    std::string_view playedTimeStr{};
+
+    for (const auto& [id, data] : m_RewardMap)
+    {
+        // Check if the player is eligible for reward
+        if (!IsEligible(player, data.playedTime, id))
+            continue;
+
+        switch (data.type)
+        {
+        case RewardType::GOLD:
+            player->ModifyMoney(data.amount * GOLD);
+            ConcatRewardMsg(player, data, message);
+            break;
+        case RewardType::ITEM:
+            for (const auto& [id, count] : data.items)
+            {
+                if (auto item = sObjectMgr->GetItemTemplate(id))
+                {
+                    player->AddItem(id, count);
+                    message += std::to_string(count);
+                    ConcatRewardMsg(player, data, message, item);
+                }
+            }
+            break;
+        case RewardType::TITLE:
+            if (const auto title = sCharTitlesStore.LookupEntry(data.amount))
+            {
+                if (!player->HasTitle(title))
+                {
+                    player->SetTitle(title);
+                    ConcatRewardMsg(player, data, message, nullptr, title);
+                }
+            }
+            break;
+        case RewardType::ACHIEVEMENT:
+            if (const auto achiv = sAchievementStore.LookupEntry(data.amount))
+            {
+                if (!player->HasAchieved(achiv->ID))
+                {
+                    player->CompletedAchievement(achiv);
+                    ConcatRewardMsg(player, data, message, nullptr, nullptr, achiv);
+                }
+            }
+            break;
+        case RewardType::EXP:
+            player->GiveXP(data.amount, nullptr);
+            ConcatRewardMsg(player, data, message);
+            break;
+        case RewardType::LEVEL:
+            player->GiveLevel(player->GetLevel() + data.amount);
+            ConcatRewardMsg(player, data, message);
+            break;
+        case RewardType::HONOR_POINTS:
+            player->ModifyHonorPoints(data.amount);
+            ConcatRewardMsg(player, data, message);
+            break;
+        case RewardType::ARENA_POINTS:
+            player->ModifyArenaPoints(data.amount);
+            ConcatRewardMsg(player, data, message);
+            break;
+        case RewardType::VOTE_POINTS:
+            SendWebReward(player, data.type, data.amount);
+            ConcatRewardMsg(player, data, message);
+            break;
+        case RewardType::DONATION_POINTS:
+            SendWebReward(player, data.type, data.amount);
+            ConcatRewardMsg(player, data, message);
+            break;
+        }
+
+        playedTimeStr = data.playedTimeStr;
+        claimedRewards.insert(id);
+    }
+
+    if (claimedRewards.empty())
+        return;
+
+    // We make sure to save the reward id
+    for (const auto& i : claimedRewards)
+        m_RewardedMap[player->GetGUID()].insert(i);
+
+    // eat the last two characters and announce to player
+    AnnounceReward(player, message.substr(0, message.size() - 2), playedTimeStr);
+}
+
+void PlayedRewards::SendWebReward(Player* player, const RewardType type, const uint32 amount)
+{
+    std::string rewardCol = type == RewardType::VOTE_POINTS ? m_SiteData[3].data() : m_SiteData[4].data();
+    // It would be better if we had a site worker but for now we can use loginDatabase
+    LoginDatabase.PQuery("UPDATE `%s`.`%s` SET `%s` = `%s` + '%u' WHERE `%s` = '%u'",
+        m_SiteData[0], m_SiteData[1], rewardCol, rewardCol, amount, m_SiteData[2], player->GetSession()->GetAccountId());
+}
+
+void PlayedRewards::LoadRewardedMap(Player* player)
+{
+    const uint64 plrGUID = player->GetGUID().GetCounter();
+    if (const QueryResult rewarded = CharacterDatabase.PQuery("SELECT `claimedRewards` FROM `played_rewarded` WHERE `guid` = '%u'", plrGUID))
+    {
+        const Field* fields = rewarded->Fetch();
+        const std::string claimedRewards = fields[0].GetString();
+
+        if (claimedRewards.empty())
+            return;
+
+        // convert std::string_view to int and push to rewardedMap
+        for (const auto& token : Trinity::Tokenize(claimedRewards, ' ', true))
+            m_RewardedMap[plrGUID].insert(atoi(token.data()));
+    }
+}
+
+void PlayedRewards::SaveRewardedMap(Player* player)
+{
+    const uint64 plrGUID = player->GetGUID().GetCounter();
+    if (m_RewardedMap.find(plrGUID) != std::end(m_RewardedMap))
+    {
+        std::string rewards{};
+        for (const auto& claimedRewards : m_RewardedMap[plrGUID])
+        {
+            rewards += std::to_string(claimedRewards);
+            rewards += ' ';
+        }
+
+        CharacterDatabase.PQuery("REPLACE INTO `played_rewarded` (`guid`, `claimedRewards`) VALUES ('%u', '%s');", plrGUID, rewards);
+    }
+}
+
diff --git a/src/server/scripts/Custom/PlayedRewards.h b/src/server/scripts/Custom/PlayedRewards.h
new file mode 100644
index 0000000000..fdc0bf7b76
--- /dev/null
+++ b/src/server/scripts/Custom/PlayedRewards.h
@@ -0,0 +1,106 @@
+/*
+    Written by Alistar@AC-WEB
+    Discord: Alistar#2047
+*/
+
+#ifndef _PLAYEDREWARDS_H_
+#define _PLAYEDREWARDS_H_
+
+#include "Player.h"
+#include "DBCStores.h"
+#include "Config.h"
+#include "DatabaseEnv.h"
+#include "Log.h"
+#include "Util.h"
+#include "World.h"
+#include "Chat.h"
+#include "ObjectMgr.h"
+#include "WorldSession.h"
+
+enum class RewardType : uint8
+{
+    GOLD = 0,
+    ITEM,
+    TITLE,
+    ACHIEVEMENT,
+    EXP,
+    LEVEL,
+    HONOR_POINTS,
+    ARENA_POINTS,
+    VOTE_POINTS,
+    DONATION_POINTS
+};
+
+const std::unordered_map<RewardType, std::string_view> RewardTypeToStr =
+{
+    {RewardType::GOLD,            "Gold"},
+    {RewardType::TITLE,           "Title"},
+    {RewardType::ACHIEVEMENT,     "Achievement"},
+    {RewardType::EXP,             "Experience"},
+    {RewardType::LEVEL,           "Level"},
+    {RewardType::ITEM,            "Item"},
+    {RewardType::HONOR_POINTS,    "Honor points"},
+    {RewardType::ARENA_POINTS,    "Arena points"},
+    {RewardType::VOTE_POINTS,     "Vote points"},
+    {RewardType::DONATION_POINTS, "Donation points"}
+};
+
+struct RewardData
+{
+    RewardData() = delete;
+    RewardData(const std::string_view t_PlayedTimeStr,
+               const uint32 t_PlayedTime,
+               const RewardType t_Type,
+               const uint32 t_Amount,
+               const std::unordered_map<uint32, uint32>& t_Id = {})
+        : playedTimeStr(t_PlayedTimeStr), playedTime(t_PlayedTime), type(t_Type), amount(t_Amount), items(t_Id) { }
+
+    std::string playedTimeStr;
+    uint32 playedTime;
+    RewardType type;
+    uint32 amount;
+    std::unordered_map<uint32, uint32> items;
+};
+
+class PlayedRewards
+{
+public:
+    typedef std::unordered_multimap<uint32, RewardData> RewardMap;
+    typedef std::unordered_map<uint64, std::unordered_set<uint32>> RewardedMap;
+
+    static PlayedRewards* instance();
+
+    const uint32 PLAYED_UPDATE_TIME = 1 * IN_MILLISECONDS; // 1 second(s)
+    LocaleConstant SERVER_LOCALE = LOCALE_enUS;
+
+    void LoadConfig();
+    void LoadFromDB();
+
+    bool IsEnabled() const;
+
+    bool IsEligible(Player* player, const uint32 playTime, const uint32 rewardId);
+    void AnnounceReward(Player* player, const std::string_view str, const std::string_view playedTime);
+    void ConcatRewardMsg(Player* player, const RewardData& data,
+        std::string& message,
+        const ItemTemplate* item = nullptr,
+        const CharTitlesEntry* const title = nullptr,
+        const AchievementEntry* const achiv = nullptr);
+
+    void SendReward(Player* player);
+
+    void SendWebReward(Player* player, const RewardType type, const uint32 amount);
+
+    void LoadRewardedMap(Player* player);
+    void SaveRewardedMap(Player* player);
+
+private:
+    bool m_IsEnabled;
+    std::array<std::string, 5> m_SiteData;
+
+    RewardMap m_RewardMap;
+    RewardedMap m_RewardedMap;
+};
+
+#define sPlayedRewards PlayedRewards::instance()
+
+#endif // _PLAYEDREWARDS_H_
diff --git a/src/server/scripts/Custom/PlayedRewards_SC.cpp b/src/server/scripts/Custom/PlayedRewards_SC.cpp
new file mode 100644
index 0000000000..89572e2f46
--- /dev/null
+++ b/src/server/scripts/Custom/PlayedRewards_SC.cpp
@@ -0,0 +1,45 @@
+/*
+    Written by Alistar@AC-WEB
+    Discord: Alistar#2047
+*/
+
+#include "ScriptMgr.h"
+#include "PlayedRewards.h"
+
+class PS_PlayedRewards : public PlayerScript
+{
+public:
+    PS_PlayedRewards() : PlayerScript("PS_PlayedRewards") { }
+
+    void OnLogin(Player* player, bool /*firstLogin*/) override
+    {
+        if (sPlayedRewards->IsEnabled())
+            sPlayedRewards->LoadRewardedMap(player);
+    }
+
+    void OnLogout(Player* player) override
+    {
+        if (sPlayedRewards->IsEnabled())
+            sPlayedRewards->SaveRewardedMap(player);
+    }
+};
+
+class WS_PlayedRewards : public WorldScript
+{
+public:
+    WS_PlayedRewards() : WorldScript("WS_PlayedRewards") { }
+
+    void OnStartup() override
+    {
+        sPlayedRewards->LoadConfig();
+
+        if (sPlayedRewards->IsEnabled())
+            sPlayedRewards->LoadFromDB();
+    }
+};
+
+void AddSC_PlayedRewards()
+{
+    new PS_PlayedRewards();
+    new WS_PlayedRewards();
+}
diff --git a/src/server/scripts/Custom/custom_script_loader.cpp b/src/server/scripts/Custom/custom_script_loader.cpp
index 9e5e9ba2bf..acbf6c1247 100644
--- a/src/server/scripts/Custom/custom_script_loader.cpp
+++ b/src/server/scripts/Custom/custom_script_loader.cpp
@@ -19,6 +19,9 @@
 
 // The name of this function should match:
 // void Add${NameOfDirectory}Scripts()
+void AddSC_PlayedRewards();
+
 void AddCustomScripts()
 {
+    AddSC_PlayedRewards();
 }
diff --git a/src/server/worldserver/worldserver.conf.dist b/src/server/worldserver/worldserver.conf.dist
index 442681e646..2c4b39a7ef 100644
--- a/src/server/worldserver/worldserver.conf.dist
+++ b/src/server/worldserver/worldserver.conf.dist
@@ -4147,3 +4147,26 @@ Metric.OverallStatusInterval = 1
 
 #
 ###################################################################################################
+
+###################################################################################################
+#   PlayedReward
+# PlayedRewards.Enable - 0 to disable / 1 to enable the played rewards system
+# PlayedRewards.SiteDB - Your website database Example: fusion_cms
+# PlayedRewards.SiteTable - The table that stores donation / vote points
+# PlayedRewards.SiteColumnID - The accountId column in that table
+# PlayedRewards.SiteColumnVP - Vote points column name
+# PlayedRewards.SiteColumnDP - Donation points column name
+#
+#   Example: Let's say you're using fusioncms your settings should look somewhat like this:
+#       PlayedRewards.SiteDB = "fusion_cms"
+#       PlayedRewards.SiteTable = "account_data"
+#       PlayedRewards.SiteColumnID = "id"
+#       PlayedRewards.SiteColumnVP = "vp"
+#       PlayedRewards.SiteColumnDP = "dp"
+
+PlayedRewards.Enable = 0
+PlayedRewards.SiteDB = ""
+PlayedRewards.SiteTable = ""
+PlayedRewards.SiteColumnID = ""
+PlayedRewards.SiteColumnVP = ""
+PlayedRewards.SiteColumnDP = ""
